// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.bilibili.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class ApiModule_ProvideClientFactory implements Factory<OkHttpClient> {
  private final ApiModule module;

  private final Provider<OkHttpClient.Builder> builderProvider;

  public ApiModule_ProvideClientFactory(
      ApiModule module, Provider<OkHttpClient.Builder> builderProvider) {
    assert module != null;
    this.module = module;
    assert builderProvider != null;
    this.builderProvider = builderProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideClient(builderProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient> create(
      ApiModule module, Provider<OkHttpClient.Builder> builderProvider) {
    return new ApiModule_ProvideClientFactory(module, builderProvider);
  }

  /** Proxies {@link ApiModule#provideClient(OkHttpClient.Builder)}. */
  public static OkHttpClient proxyProvideClient(ApiModule instance, OkHttpClient.Builder builder) {
    return instance.provideClient(builder);
  }
}
