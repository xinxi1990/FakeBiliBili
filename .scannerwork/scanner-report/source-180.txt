// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.bilibili.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class ApiModule_ProvideZhihuRetrofitFactory implements Factory<Retrofit> {
  private final ApiModule module;

  private final Provider<Retrofit.Builder> builderProvider;

  private final Provider<OkHttpClient> clientProvider;

  public ApiModule_ProvideZhihuRetrofitFactory(
      ApiModule module,
      Provider<Retrofit.Builder> builderProvider,
      Provider<OkHttpClient> clientProvider) {
    assert module != null;
    this.module = module;
    assert builderProvider != null;
    this.builderProvider = builderProvider;
    assert clientProvider != null;
    this.clientProvider = clientProvider;
  }

  @Override
  public Retrofit get() {
    return Preconditions.checkNotNull(
        module.provideZhihuRetrofit(builderProvider.get(), clientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Retrofit> create(
      ApiModule module,
      Provider<Retrofit.Builder> builderProvider,
      Provider<OkHttpClient> clientProvider) {
    return new ApiModule_ProvideZhihuRetrofitFactory(module, builderProvider, clientProvider);
  }

  /** Proxies {@link ApiModule#provideZhihuRetrofit(Retrofit.Builder, OkHttpClient)}. */
  public static Retrofit proxyProvideZhihuRetrofit(
      ApiModule instance, Retrofit.Builder builder, OkHttpClient client) {
    return instance.provideZhihuRetrofit(builder, client);
  }
}
