// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.bilibili.di.component;

import com.bilibili.di.module.ActivityModule;
import com.bilibili.di.module.PageModule;
import com.bilibili.di.module.PageModule_ProvideMainFragmentFactory;
import com.bilibili.di.module.PageModule_ProvideRegionFragmentFactory;
import com.bilibili.model.api.ApiLiveApis;
import com.bilibili.model.api.AppApis;
import com.bilibili.model.api.BangumiApis;
import com.bilibili.model.api.LiveApis;
import com.bilibili.model.api.WeChatApis;
import com.bilibili.ui.live.liveplay.LivePlayActivity;
import com.bilibili.ui.live.liveplay.LivePlayActivity_MembersInjector;
import com.bilibili.ui.live.liveplay.LivePlayPresenter;
import com.bilibili.ui.live.liveplay.LivePlayPresenter_Factory;
import com.bilibili.ui.main.MainActivity;
import com.bilibili.ui.main.MainActivity_MembersInjector;
import com.bilibili.ui.main.MainFragment;
import com.bilibili.ui.main.MainPresenter;
import com.bilibili.ui.main.MainPresenter_Factory;
import com.bilibili.ui.region.RegionFragment;
import com.bilibili.ui.test.activity.NewsActivity;
import com.bilibili.ui.test.activity.ScrollGradientActivity;
import com.bilibili.ui.test.activity.ScrollGradientActivity_MembersInjector;
import com.bilibili.ui.test.activity.StatusWithPictureActivity;
import com.bilibili.ui.test.activity.StatusWithPictureActivity_MembersInjector;
import com.bilibili.ui.test.activity.TestApiActivity;
import com.bilibili.ui.test.activity.TestApiActivity_MembersInjector;
import com.bilibili.ui.test.activity.TestNoBaseActivity;
import com.bilibili.ui.test.activity.TestNoBaseMvpActivity;
import com.bilibili.ui.test.activity.TestNoBaseMvpActivity_MembersInjector;
import com.bilibili.ui.test.activity.ToolbarBehaviorActivity;
import com.bilibili.ui.test.activity.ToolbarBehaviorActivity_MembersInjector;
import com.bilibili.ui.test.mvp.presenter.MvpStructurePresenter;
import com.bilibili.ui.test.mvp.presenter.MvpStructurePresenter_Factory;
import com.bilibili.ui.test.mvp.presenter.NoBaseMvpPresenter;
import com.bilibili.ui.test.mvp.presenter.NoBaseMvpPresenter_Factory;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<MainPresenter> mainPresenterProvider;

  private Provider<MainFragment> provideMainFragmentProvider;

  private Provider<RegionFragment> provideRegionFragmentProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private Provider<ApiLiveApis> apiLiveApisProvider;

  private Provider<LivePlayPresenter> livePlayPresenterProvider;

  private MembersInjector<LivePlayActivity> livePlayActivityMembersInjector;

  private Provider<WeChatApis> weChatApisProvider;

  private Provider<MvpStructurePresenter> mvpStructurePresenterProvider;

  private MembersInjector<ToolbarBehaviorActivity> toolbarBehaviorActivityMembersInjector;

  private MembersInjector<StatusWithPictureActivity> statusWithPictureActivityMembersInjector;

  private MembersInjector<ScrollGradientActivity> scrollGradientActivityMembersInjector;

  private Provider<AppApis> appApisProvider;

  private Provider<BangumiApis> biliBiliApisProvider;

  private Provider<LiveApis> liveApisProvider;

  private MembersInjector<TestApiActivity> testApiActivityMembersInjector;

  private Provider<NoBaseMvpPresenter> noBaseMvpPresenterProvider;

  private MembersInjector<TestNoBaseMvpActivity> testNoBaseMvpActivityMembersInjector;

  private DaggerActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.mainPresenterProvider =
        MainPresenter_Factory.create(MembersInjectors.<MainPresenter>noOp());

    this.provideMainFragmentProvider =
        DoubleCheck.provider(PageModule_ProvideMainFragmentFactory.create(builder.pageModule));

    this.provideRegionFragmentProvider =
        DoubleCheck.provider(PageModule_ProvideRegionFragmentFactory.create(builder.pageModule));

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(
            mainPresenterProvider, provideMainFragmentProvider, provideRegionFragmentProvider);

    this.apiLiveApisProvider =
        new com_bilibili_di_component_ApiComponent_apiLiveApis(builder.apiComponent);

    this.livePlayPresenterProvider =
        LivePlayPresenter_Factory.create(
            MembersInjectors.<LivePlayPresenter>noOp(), apiLiveApisProvider);

    this.livePlayActivityMembersInjector =
        LivePlayActivity_MembersInjector.create(livePlayPresenterProvider);

    this.weChatApisProvider =
        new com_bilibili_di_component_ApiComponent_weChatApis(builder.apiComponent);

    this.mvpStructurePresenterProvider =
        MvpStructurePresenter_Factory.create(
            MembersInjectors.<MvpStructurePresenter>noOp(), weChatApisProvider);

    this.toolbarBehaviorActivityMembersInjector =
        ToolbarBehaviorActivity_MembersInjector.create(mvpStructurePresenterProvider);

    this.statusWithPictureActivityMembersInjector =
        StatusWithPictureActivity_MembersInjector.create(mvpStructurePresenterProvider);

    this.scrollGradientActivityMembersInjector =
        ScrollGradientActivity_MembersInjector.create(mvpStructurePresenterProvider);

    this.appApisProvider = new com_bilibili_di_component_ApiComponent_appApis(builder.apiComponent);

    this.biliBiliApisProvider =
        new com_bilibili_di_component_ApiComponent_biliBiliApis(builder.apiComponent);

    this.liveApisProvider =
        new com_bilibili_di_component_ApiComponent_liveApis(builder.apiComponent);

    this.testApiActivityMembersInjector =
        TestApiActivity_MembersInjector.create(
            appApisProvider, biliBiliApisProvider, liveApisProvider, apiLiveApisProvider);

    this.noBaseMvpPresenterProvider =
        NoBaseMvpPresenter_Factory.create(
            MembersInjectors.<NoBaseMvpPresenter>noOp(), weChatApisProvider);

    this.testNoBaseMvpActivityMembersInjector =
        TestNoBaseMvpActivity_MembersInjector.create(noBaseMvpPresenterProvider);
  }

  @Override
  public void inject(MainActivity mainActivity) {
    mainActivityMembersInjector.injectMembers(mainActivity);
  }

  @Override
  public void inject(LivePlayActivity livePlayActivity) {
    livePlayActivityMembersInjector.injectMembers(livePlayActivity);
  }

  @Override
  public void inject(NewsActivity newsActivity) {
    MembersInjectors.<NewsActivity>noOp().injectMembers(newsActivity);
  }

  @Override
  public void inject(ToolbarBehaviorActivity toolbarBehaviorActivity) {
    toolbarBehaviorActivityMembersInjector.injectMembers(toolbarBehaviorActivity);
  }

  @Override
  public void inject(StatusWithPictureActivity statusWithPictureActivity) {
    statusWithPictureActivityMembersInjector.injectMembers(statusWithPictureActivity);
  }

  @Override
  public void inject(ScrollGradientActivity scrollGradientActivity) {
    scrollGradientActivityMembersInjector.injectMembers(scrollGradientActivity);
  }

  @Override
  public void inject(TestApiActivity testApiActivity) {
    testApiActivityMembersInjector.injectMembers(testApiActivity);
  }

  @Override
  public void inject(TestNoBaseActivity testNoBaseActivity) {
    MembersInjectors.<TestNoBaseActivity>noOp().injectMembers(testNoBaseActivity);
  }

  @Override
  public void inject(TestNoBaseMvpActivity testNoBaseMvpActivity) {
    testNoBaseMvpActivityMembersInjector.injectMembers(testNoBaseMvpActivity);
  }

  public static final class Builder {
    private PageModule pageModule;

    private ApiComponent apiComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (pageModule == null) {
        this.pageModule = new PageModule();
      }
      if (apiComponent == null) {
        throw new IllegalStateException(ApiComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder activityModule(ActivityModule activityModule) {
      Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder pageModule(PageModule pageModule) {
      this.pageModule = Preconditions.checkNotNull(pageModule);
      return this;
    }

    public Builder apiComponent(ApiComponent apiComponent) {
      this.apiComponent = Preconditions.checkNotNull(apiComponent);
      return this;
    }
  }

  private static class com_bilibili_di_component_ApiComponent_apiLiveApis
      implements Provider<ApiLiveApis> {
    private final ApiComponent apiComponent;

    com_bilibili_di_component_ApiComponent_apiLiveApis(ApiComponent apiComponent) {
      this.apiComponent = apiComponent;
    }

    @Override
    public ApiLiveApis get() {
      return Preconditions.checkNotNull(
          apiComponent.apiLiveApis(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_bilibili_di_component_ApiComponent_weChatApis
      implements Provider<WeChatApis> {
    private final ApiComponent apiComponent;

    com_bilibili_di_component_ApiComponent_weChatApis(ApiComponent apiComponent) {
      this.apiComponent = apiComponent;
    }

    @Override
    public WeChatApis get() {
      return Preconditions.checkNotNull(
          apiComponent.weChatApis(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_bilibili_di_component_ApiComponent_appApis implements Provider<AppApis> {
    private final ApiComponent apiComponent;

    com_bilibili_di_component_ApiComponent_appApis(ApiComponent apiComponent) {
      this.apiComponent = apiComponent;
    }

    @Override
    public AppApis get() {
      return Preconditions.checkNotNull(
          apiComponent.appApis(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_bilibili_di_component_ApiComponent_biliBiliApis
      implements Provider<BangumiApis> {
    private final ApiComponent apiComponent;

    com_bilibili_di_component_ApiComponent_biliBiliApis(ApiComponent apiComponent) {
      this.apiComponent = apiComponent;
    }

    @Override
    public BangumiApis get() {
      return Preconditions.checkNotNull(
          apiComponent.biliBiliApis(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_bilibili_di_component_ApiComponent_liveApis
      implements Provider<LiveApis> {
    private final ApiComponent apiComponent;

    com_bilibili_di_component_ApiComponent_liveApis(ApiComponent apiComponent) {
      this.apiComponent = apiComponent;
    }

    @Override
    public LiveApis get() {
      return Preconditions.checkNotNull(
          apiComponent.liveApis(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
