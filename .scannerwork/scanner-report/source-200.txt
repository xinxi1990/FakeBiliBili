// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.bilibili.di.component;

import com.bilibili.di.module.ApiModule;
import com.bilibili.di.module.ApiModule_ProvideApiLiveRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideApiLiveServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideAppRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideAppServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideBangumiRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideBangumiServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideClientFactory;
import com.bilibili.di.module.ApiModule_ProvideLiveRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideLiveServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideOkHttpBuilderFactory;
import com.bilibili.di.module.ApiModule_ProvideRecommendRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideRecommendServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideRegionRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideRegionServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideRetrofitBuilderFactory;
import com.bilibili.di.module.ApiModule_ProvideWeChatServiceFactory;
import com.bilibili.di.module.ApiModule_ProvideWechatRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideZhihuRetrofitFactory;
import com.bilibili.di.module.ApiModule_ProvideZhihuServiceFactory;
import com.bilibili.model.api.ApiLiveApis;
import com.bilibili.model.api.AppApis;
import com.bilibili.model.api.BangumiApis;
import com.bilibili.model.api.LiveApis;
import com.bilibili.model.api.RecommendApis;
import com.bilibili.model.api.RegionApis;
import com.bilibili.model.api.WeChatApis;
import com.bilibili.model.api.ZhihuApis;
import com.common.app.AppComponent;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerApiComponent implements ApiComponent {
  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<OkHttpClient.Builder> provideOkHttpBuilderProvider;

  private Provider<OkHttpClient> provideClientProvider;

  private Provider<Retrofit> provideAppRetrofitProvider;

  private Provider<AppApis> provideAppServiceProvider;

  private Provider<Retrofit> provideLiveRetrofitProvider;

  private Provider<LiveApis> provideLiveServiceProvider;

  private Provider<Retrofit> provideRecommendRetrofitProvider;

  private Provider<RecommendApis> provideRecommendServiceProvider;

  private Provider<Retrofit> provideBangumiRetrofitProvider;

  private Provider<BangumiApis> provideBangumiServiceProvider;

  private Provider<Retrofit> provideRegionRetrofitProvider;

  private Provider<RegionApis> provideRegionServiceProvider;

  private Provider<Retrofit> provideApiLiveRetrofitProvider;

  private Provider<ApiLiveApis> provideApiLiveServiceProvider;

  private Provider<Retrofit> provideZhihuRetrofitProvider;

  private Provider<ZhihuApis> provideZhihuServiceProvider;

  private Provider<Retrofit> provideWechatRetrofitProvider;

  private Provider<WeChatApis> provideWeChatServiceProvider;

  private DaggerApiComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApiComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideRetrofitBuilderProvider =
        DoubleCheck.provider(ApiModule_ProvideRetrofitBuilderFactory.create(builder.apiModule));

    this.provideOkHttpBuilderProvider =
        DoubleCheck.provider(ApiModule_ProvideOkHttpBuilderFactory.create(builder.apiModule));

    this.provideClientProvider =
        DoubleCheck.provider(
            ApiModule_ProvideClientFactory.create(builder.apiModule, provideOkHttpBuilderProvider));

    this.provideAppRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideAppRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideAppServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideAppServiceFactory.create(
                builder.apiModule, provideAppRetrofitProvider));

    this.provideLiveRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideLiveRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideLiveServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideLiveServiceFactory.create(
                builder.apiModule, provideLiveRetrofitProvider));

    this.provideRecommendRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRecommendRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideRecommendServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRecommendServiceFactory.create(
                builder.apiModule, provideRecommendRetrofitProvider));

    this.provideBangumiRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideBangumiRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideBangumiServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideBangumiServiceFactory.create(
                builder.apiModule, provideBangumiRetrofitProvider));

    this.provideRegionRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRegionRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideRegionServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRegionServiceFactory.create(
                builder.apiModule, provideRegionRetrofitProvider));

    this.provideApiLiveRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideApiLiveRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideApiLiveServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideApiLiveServiceFactory.create(
                builder.apiModule, provideApiLiveRetrofitProvider));

    this.provideZhihuRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideZhihuRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideZhihuServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideZhihuServiceFactory.create(
                builder.apiModule, provideZhihuRetrofitProvider));

    this.provideWechatRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideWechatRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider, provideClientProvider));

    this.provideWeChatServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideWeChatServiceFactory.create(
                builder.apiModule, provideWechatRetrofitProvider));
  }

  @Override
  public AppApis appApis() {
    return provideAppServiceProvider.get();
  }

  @Override
  public LiveApis liveApis() {
    return provideLiveServiceProvider.get();
  }

  @Override
  public RecommendApis recommendApis() {
    return provideRecommendServiceProvider.get();
  }

  @Override
  public BangumiApis biliBiliApis() {
    return provideBangumiServiceProvider.get();
  }

  @Override
  public RegionApis regionApis() {
    return provideRegionServiceProvider.get();
  }

  @Override
  public ApiLiveApis apiLiveApis() {
    return provideApiLiveServiceProvider.get();
  }

  @Override
  public ZhihuApis zhihuApis() {
    return provideZhihuServiceProvider.get();
  }

  @Override
  public WeChatApis weChatApis() {
    return provideWeChatServiceProvider.get();
  }

  public static final class Builder {
    private ApiModule apiModule;

    private AppComponent appComponent;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }
}
