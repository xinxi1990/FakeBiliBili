apply plugin: 'com.android.application'
apply plugin: 'jacoco'//添加插件jacoco

jacoco{
    toolVersion = "0.7.4+"//声明jacoco的版本号
}

android {
    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.bilibili"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 120
        versionName "1.2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }


    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile project(':common')
    compile project(':ijkplayer')
    compile "com.google.dagger:dagger:$dagger_version"
    compile("com.jakewharton:butterknife:$butterknife_version") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-compat'
    }
    compile 'com.alibaba:fastjson:1.2.14'
    compile 'org.jsoup:jsoup:1.10.2'
    //弹幕烈焰使
    compile 'com.github.ctiao:DanmakuFlameMaster:0.9.12'

    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknife_version"
}

def coverageSourceDirs = [
        '../app/src/main/java'
]


task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R*.class',
                      '**/*$InjectAdapter.class',
                      '**/*$ModuleAdapter.class',
                      '**/*$ViewInjector*.class'
    ]
    def debugTree = fileTree(dir:"$buildDir/intermediates/classes/release", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir:"$buildDir/tmp/kotlin-classes/release", excludes: fileFilter)

    classDirectories = files([debugTree], [kotlinDebugTree])
    sourceDirectories = files(coverageSourceDirs)
//    executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
    executionData = fileTree(dir:"$buildDir", includes: [
            "outputs/code-coverage/connected/*coverage.ec"
    ])

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}